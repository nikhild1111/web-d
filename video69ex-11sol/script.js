let a = 7
// console.log(Array(6+1).keys());
function factorial(number){
    // In JavaScript, Array(n) creates a new array with a length specified by n. So Array(number+1) would create an array with a length of number + 1.
// In the line Array(number+7), it creates a new array with a length of number + 7. This means it will create an array with number + 7 empty slots.
    // However, it's important to note that these empty slots are not undefined values; they're just empty. The array doesn't contain any elements, but it has a length of number + 7.
   let arr = Array.from(Array(number+1).keys())

   //***my */
//    here we just declare an array by using array(n) constrctor then we use keys() method which create an iterator that contains keys(indises)of array with length n which are then converted into an array using Array.from().
   let c = arr.slice(1,).reduce((a, b)=> a*b )
   return c
}
console.log(Array(7+1))//accesing the number outside the function give error


function facFor(number){
    let fac = 1;
    for (let index = 1; index <= number; index++) {
        fac = fac * index
    }
    return fac
}
console.log(factorial(a))
console.log(facFor(a))
//*********UNSSHIFT */
// The unshift() method inserts the given values to the beginning of an array-like object.


//**********PARSEINT*************** */
// *parseInt() is a global function in JavaScript that is used to parse a string and convert it into an integer. It takes two arguments:

// The string that you want to parse.
// An optional argument representing the radix (or base) of the numeral system to be used. This argument is typically between 2 and 36, inclusive. If this argument is not provided, parseInt() will attempt to determine the radix of the number automatically.
// Here's a basic example of how parseInt() is used:

// javascript
// Copy code
// let str = "123";
// let num = parseInt(str);
// console.log(num); // Output: 123
// In this example, the string "123" is parsed as an integer using parseInt(), and the result is assigned to the variable num.

// If you want to explicitly specify the radix, you can do so by passing it as the second argument to parseInt():

// javascript
// Copy code
// let str = "10";
// let num = parseInt(str, 2);
// console.log(num); // Output: 2
// In this example, the string "10" is interpreted as a binary number because the radix is set to 2. Therefore, the result of parseInt("10", 2) is 2.

// Keep in mind that parseInt() parses the string until it encounters a character that is not a valid digit in the specified radix. If the first character of the string cannot be converted to a number, parseInt() returns NaN (Not a Number).*/

//************************************ */




// The line `let arr = Array.from(Array(number+1).keys())` is a concise way to create an array containing numbers from 0 to `number`.

// Let's break it down:

// - `Array(number+1)` creates an array of length `number + 1`, but with empty slots.
// - `.keys()` returns an iterator over the indices of the array. In this case, it will be an iterator over the numbers from 0 to `number`.
// - `Array.from()` converts this iterator into an array.

// So, for example, if you call `Array.from(Array(7+1).keys())`, it will create an array `[0, 1, 2, 3, 4, 5, 6, 7]`. This array will then be assigned to the variable `arr`.




// Sure, let's break down each part of the expression Array.from(Array(number+1).keys()):

// Array(number+1):
// This part creates an array with a length of number + 1. For example, if number is 7, then Array(number+1) creates an array with a length of 8.
// .keys():
// The keys() method returns an iterator that generates the keys (indices) of the array. In this case, since the array's length is 8, the keys generated by keys() would be 0, 1, 2, 3, 4, 5, 6, and 7.
// Array.from():
// This method converts an array-like or iterable object into a new array. Here, it takes the iterator generated by .keys() and converts it into an array.
// So, in summary, Array.from(Array(number+1).keys()) creates an array containing integers from 0 to number, inclusive. For example, if number is 7, the resulting array would be [0, 1, 2, 3, 4, 5, 6, 7].




let array = ['a', 'b', 'c'];

let iterator = array.keys();

console.log(iterator.next()); // {value: 0, done: false}
var iter=iterator.next();
console.log(array[iter.value]);
// In the context of the iterator, nextElement is an object returned by the iterator.next() method. This object contains two properties: value and done. The value property holds the current index of the array, and the done property is a boolean indicating whether the iterator has been exhausted.

// When you call iterator.next(), it returns an object like {value: 0, done: false}. You need to access the value property to get the index. Directly using nextElement would give you the whole object, not just the index.
console.log(iterator.next()); // {value: 1, done: false}
console.log(iterator.next()); // {value: 2, done: false}
console.log(iterator.next()); // {value: undefined, done: true}
// As you can see, keys() returns an iterator object. Each time you call .next() on this iterator, it returns an object with a value representing the next key/index in the array, and a done property indicating whether the iteration is complete.

//supose we having a array and we want its iterator value(indises) to itrates through its element then we array,keys() methos to itrator

// let array = ['a', 'b', 'c'];

// let iterator = array.keys();

// let nextElement = iterator.next();
// while (!nextElement.done) {
//     console.log(array[nextElement.value]); // Prints the value at the current index
//     nextElement = iterator.next();
// }










// In JavaScript, an iterator is an object that provides a way to access the elements of a collection (such as an array) sequentially, one at a time. It allows you to loop over the elements of a collection using the next() method.

// Here's a brief overview of how iterators work:

// Creation: You create an iterator by calling a method like keys(), values(), or entries() on a collection (such as an array). These methods return an iterator object.
// Iteration: You use the iterator's next() method to get the next element in the sequence. Each call to next() returns an object with two properties:
// value: The current value in the sequence.
// done: A boolean indicating whether the iteration is complete (true if there are no more elements to iterate over).
// Termination: When the iterator reaches the end of the collection, subsequent calls to next() return an object with { value: undefined, done: true }.
// In the context of your code, Array(number+1).keys() creates an iterator containing the keys (indices) of an array with the length number + 1. This iterator allows you to iterate over the keys of the array, which are then converted into an array using Array.from().


// The expression Array(number+1).keys() works by first creating an array with a specified length using the Array() constructor, and then obtaining an iterator for the keys (indices) of that array using the .keys() method.

// Here's a step-by-step breakdown:

// Array(number+1): This part creates a new array with a length specified by number + 1. For example, if number is 7, then Array(number+1) creates an array with a length of 8.
// .keys(): This method is called on the array created in the previous step. The .keys() method returns an iterator that generates the keys (indices) of the array. In this case, the keys generated would be 0, 1, 2, ..., number.
// Putting it together, Array(number+1).keys() creates an iterator containing the keys (indices) of an array with a length of number + 1. This iterator allows you to sequentially access the keys of the array, which are then used to generate indices for the array.